'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _objectPath = require('object-path');

var _objectPath2 = _interopRequireDefault(_objectPath);

var _marked = require('marked');

var _marked2 = _interopRequireDefault(_marked);

var _typeset = require('typeset');

var _typeset2 = _interopRequireDefault(_typeset);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * ItsABlog
 */
var ItsABlog = function () {
    function ItsABlog(options) {
        _classCallCheck(this, ItsABlog);

        var defaultOptions = {
            metaTagStart: '<meta>',
            metaTagEnd: '</meta>',
            dir: 'blog',
            encoding: 'utf-8',
            pretty: true,
            output: 'blog.json'
        };

        var compiledOptions = {};

        Object.keys(defaultOptions).forEach(function (key) {
            compiledOptions[key] = _objectPath2.default.has(options, key) ? options[key] : defaultOptions[key];
        });

        this.options = compiledOptions;
    }

    /**
     * Runner Methods
     */


    _createClass(ItsABlog, [{
        key: 'getPosts',
        value: function getPosts() {
            this.configureFileManifest();
            return this.fileManifest;
        }

        /**
         * Write fileManifest to given output file
         */

    }, {
        key: 'outputToFile',
        value: function outputToFile() {
            this.configureFileManifest();
            this.writeToFile();
            console.log('Output to file: "' + this.options.output + '"');
        }

        /**
         * Builder Methods
         */

        /**
         * Sets up the file manifest, if it hasn't been done already
         */

    }, {
        key: 'configureFileManifest',
        value: function configureFileManifest() {
            if (typeof this.fileManifest === 'undefined') {
                this.getNamesOfFilesFromDir();
                this.initiateFileManifest();
                this.initializeMetaData();
                this.configureCustomMetaData();
                this.removeMetaDataString();
                this.compileContent();
                this.options.pretty && this.prettifyFileManifest();
            }
        }

        /**
         * Sets the fileNames member equal to all file names in the given dir
         */

    }, {
        key: 'getNamesOfFilesFromDir',
        value: function getNamesOfFilesFromDir() {
            this.fileNames = _fs2.default.readdirSync(this.options.dir);
        }

        /**
         * Sets the fileManifest to have keys based on the file names from the directory,
         * and their content
         */

    }, {
        key: 'initiateFileManifest',
        value: function initiateFileManifest() {
            var _this = this;

            if (!_objectPath2.default.get(this, 'fileNames.length')) {
                throw 'no files found in given dir';
            }

            this.fileManifest = {};

            this.fileNames.forEach(function (fileName) {
                _this.fileManifest[fileName] = {
                    content: _fs2.default.readFileSync(_this.options.dir + '/' + fileName, _this.options.encoding)
                };
            });

            delete this.fileNames;
        }

        /**
         * Sets up metaData for each item in fileManifest
         */

    }, {
        key: 'initializeMetaData',
        value: function initializeMetaData() {
            var _this2 = this;

            Object.keys(this.fileManifest).forEach(function (key) {
                _this2.fileManifest[key].meta = {
                    creationDate: _fs2.default.statSync(_this2.options.dir + '/' + key).birthtime,
                    lastEdited: _fs2.default.statSync(_this2.options.dir + '/' + key).mtime
                };
            });
        }

        /**
         * Adds meta data set within the blog post to the meta data for the fileManifest
         */

    }, {
        key: 'configureCustomMetaData',
        value: function configureCustomMetaData() {
            var _this3 = this;

            Object.keys(this.fileManifest).forEach(function (key) {
                var containsCustomMetaData = _this3.fileManifest[key].content.indexOf(_this3.options.metaTagStart) > -1,
                    customMetaDataString = void 0,
                    customMetaData = void 0;

                if (containsCustomMetaData) {
                    customMetaDataString = _this3.fileManifest[key].content.substring(_this3.fileManifest[key].content.indexOf(_this3.options.metaTagStart) + _this3.options.metaTagStart.length, _this3.fileManifest[key].content.indexOf(_this3.options.metaTagEnd));

                    customMetaData = JSON.parse(customMetaDataString);

                    Object.assign(_this3.fileManifest[key].meta, customMetaData);
                }
            });
        }

        /**
         * Removes text that contains meta data from the outputted content of the item in the fileManifest
         */

    }, {
        key: 'removeMetaDataString',
        value: function removeMetaDataString() {
            var _this4 = this;

            Object.keys(this.fileManifest).forEach(function (key) {
                var customMetaDataString = _this4.fileManifest[key].content.substring(_this4.fileManifest[key].content.indexOf(_this4.options.metaTagStart), _this4.fileManifest[key].content.indexOf(_this4.options.metaTagEnd) + _this4.options.metaTagEnd.length);

                _this4.fileManifest[key].content = _this4.fileManifest[key].content.substring(_this4.fileManifest[key].content.indexOf(customMetaDataString) + customMetaDataString.length, _this4.fileManifest[key].content.length);
            });
        }

        /**
         * Changes content of each item in fileManifest to be html compatable, and
         * char changed to typeset
         */

    }, {
        key: 'compileContent',
        value: function compileContent() {
            var _this5 = this;

            Object.keys(this.fileManifest).forEach(function (key) {
                _this5.fileManifest[key].content = (0, _typeset2.default)((0, _marked2.default)(_this5.fileManifest[key].content));
            });
        }

        /**
         * Changes fileManifest keys to be the file name without the extension, by making
         * them substrings up to the first '.'
         */

    }, {
        key: 'prettifyFileManifest',
        value: function prettifyFileManifest() {
            var _this6 = this;

            Object.keys(this.fileManifest).forEach(function (key) {
                var prettyName = key.substr(0, key.indexOf('.'));
                _this6.fileManifest[prettyName] = _this6.fileManifest[key];
                delete _this6.fileManifest[key];
            });
        }

        /**
         * Writes the fileManifest to the file set in the options
         */

    }, {
        key: 'writeToFile',
        value: function writeToFile() {
            _fs2.default.writeFileSync(this.options.output, JSON.stringify(this.fileManifest, null, this.options.pretty ? '\t' : null));
        }
    }]);

    return ItsABlog;
}();

exports.default = ItsABlog;
module.exports = exports['default'];
